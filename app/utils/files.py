"""\nutils.files\n===========\n\nUtilidades de sistema de archivos:\n\n- ensure_empty_dir(path)   → crea la carpeta vacía (borra contenido si ya existe)\n- natural_sort_key(path)   → ordena \"1.jpg, 2.jpg, 10.jpg\" de forma natural\n- write_text(path, text)   → helper seguro para escribir texto (UTF-8)\n- save_json(path, obj)     → helper para escribir JSON con indent y UTF-8\n- list_images(dir)         → lista paths de imágenes soportadas\n\"\"\"\n\nfrom __future__ import annotations\n\nimport json\nimport re\nimport shutil\nfrom pathlib import Path\nfrom typing import Iterable, List\n\n\ndef ensure_empty_dir(path: Path) -> Path:\n    \"\"\"\n    Ensure directory exists and is empty.\n    \n    Args:\n        path: Directory path\n        \n    Returns:\n        The directory path\n    \"\"\"\n    if path.exists():\n        shutil.rmtree(path)\n    path.mkdir(parents=True, exist_ok=True)\n    return path\n\n\ndef natural_sort_key(path: Path) -> List:\n    \"\"\"\n    Generate a sort key for natural sorting of file names.\n    \n    This ensures that \"1.jpg, 2.jpg, 10.jpg\" sorts correctly\n    instead of \"1.jpg, 10.jpg, 2.jpg\".\n    \n    Args:\n        path: File path\n        \n    Returns:\n        Sort key for natural ordering\n    \"\"\"\n    def convert(text):\n        return int(text) if text.isdigit() else text.lower()\n    \n    return [convert(c) for c in re.split('([0-9]+)', path.name)]\n\n\ndef write_text(path: Path, text: str) -> None:\n    \"\"\"\n    Safely write text to file with UTF-8 encoding.\n    \n    Args:\n        path: File path\n        text: Text content\n    \"\"\"\n    path.parent.mkdir(parents=True, exist_ok=True)\n    path.write_text(text, encoding='utf-8')\n\n\ndef save_json(path: Path, obj) -> None:\n    \"\"\"\n    Save object as JSON with proper formatting.\n    \n    Args:\n        path: File path\n        obj: Object to serialize\n    \"\"\"\n    path.parent.mkdir(parents=True, exist_ok=True)\n    with open(path, 'w', encoding='utf-8') as f:\n        json.dump(obj, f, indent=2, ensure_ascii=False)\n\n\ndef list_images(directory: Path) -> List[Path]:\n    \"\"\"\n    List all supported image files in directory.\n    \n    Args:\n        directory: Directory to search\n        \n    Returns:\n        List of image file paths, naturally sorted\n    \"\"\"\n    if not directory.exists():\n        return []\n    \n    supported_extensions = {'.jpg', '.jpeg', '.png', '.webp', '.gif', '.bmp'}\n    \n    images = [\n        f for f in directory.iterdir()\n        if f.is_file() and f.suffix.lower() in supported_extensions\n    ]\n    \n    return sorted(images, key=natural_sort_key)\n